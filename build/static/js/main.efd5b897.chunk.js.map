{"version":3,"sources":["services/persons.js","components/Filter.js","components/Form.js","components/Notification.js","components/Person.js","components/Persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","console","log","put","message","handler","status","setTimeout","Filter","value","onChange","Form","onSubmit","nameValue","nameChange","numberValue","numberChange","type","Notification","className","Person","name","number","onClick","Persons","contacts","deleteContact","map","person","key","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","notification","setNotification","useEffect","personService","filteredPersons","toLowerCase","includes","event","target","preventDefault","some","window","confirm","contact","find","updatedContact","returnedContact","catch","error","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.efd5b897.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(console.log)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst notify = (message, handler, status) => {\n  handler([status, message])\n  setTimeout(() => {\n    handler([null, null])\n  }, 5000)\n}\n\nexport default { getAll, create, remove, update, notify }","import React from 'react';\n\nconst Filter = ({value, onChange}) => (\n  <div>\n    filter shown with <input value={value} onChange={onChange} />\n  </div>\n  );\n\nexport default Filter;","import React from 'react';\n\nconst Form = ({ onSubmit, nameValue, nameChange, numberValue, numberChange }) => (\n  <form onSubmit={onSubmit}>\n    <div>\n      name: <input value={nameValue} onChange={nameChange}/>\n    </div>\n    <div>\n      number: <input value={numberValue} onChange={numberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n  );\n\nexport default Form;","import React from 'react';\n\nconst Notification = ({ message, status }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={status} >\n      {message}\n    </div>\n  )\n}\n\nexport default Notification;","import React from 'react';\n\nconst Person = ({ name, number, handler }) => (\n  <div>{name} {number}<button onClick={handler}>delete</button></div>\n  );\n\nexport default Person;","import React from 'react';\n\nimport Person from './Person'\n\nconst Persons = ({ contacts, deleteContact }) => (\n      <div>\n        {contacts.map(person => <Person key={person.id} name={person.name} number={person.number} handler={() => deleteContact(person)} />)}\n      </div>\n  );\n\nexport default Persons;","import React, { useState, useEffect } from 'react'\n\nimport personService from './services/persons'\n\nimport Filter from './components/Filter'\nimport Form from './components/Form'\nimport Notification from './components/Notification'\nimport Persons from './components/Persons'\n\nimport './App.css'\n\nconst App = () => {\n  const [persons, setPersons] = useState([]) \n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [notification, setNotification] = useState([null, null])\n\n  useEffect(() => {\n    personService\n    .getAll()\n    .then(persons => setPersons(persons))\n  }, [])\n\n  const submitContact = (event) => {\n    event.preventDefault()\n    if (persons.some(person => person.name === newName)) {\n      if (window.confirm(`${newName} is already added to the phnebook, replace old number?`)) {\n      const contact = persons.find(person => person.name === newName)\n      const updatedContact = { ...contact, number: newNumber }\n  \n      personService\n        .update(contact.id, updatedContact)\n        .then(returnedContact => {\n          setPersons(persons.map(person => person.id !== contact.id ? person : returnedContact))\n          setNewName('')\n          setNewNumber('')\n          personService.notify(`${returnedContact.name}'s number has been updated`, setNotification, 'success')\n\n        })\n        .catch(error => {\n          personService.notify(`${newName} was already deleted from server`, setNotification, 'error')\n          setPersons(persons.filter(person => person.id !== contact.id))\n        })\n      } else {\n        setNewName('')\n        setNewNumber('')\n      }\n    } else {\n      const nameObject = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(nameObject)\n        .then(returnedContact => {\n          setPersons(persons.concat(returnedContact))\n          setNewName('')\n          setNewNumber('')\n          personService.notify(`Added ${returnedContact.name}`, setNotification, `success`)\n        })\n        .catch(error => {\n          personService.notify(error.response.data.error, setNotification, 'error')\n        })\n    }\n  }\n\n  const deleteContact = ({name, id}) => {\n    if (window.confirm(`delete ${name}?`)) {\n    personService.remove(id)\n    setPersons(persons.filter(person => person.id !== id))\n    personService.notify(`${name} deleted`, setNotification, 'success')\n    }\n  }\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleFilter = (event) => setFilter(event.target.value)\n\n  const filteredPersons = persons.filter(person => person.name.toLowerCase().includes(filter))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification[1]} status={notification[0]} />\n      <Filter value={filter} onChange={handleFilter} />\n      <h3>add a new</h3>\n      <Form \n        onSubmit={submitContact} \n        nameValue={newName} \n        nameChange={handleNameChange} \n        numberValue={newNumber} \n        numberChange={handleNumberChange} \n      />\n      <h3>Numbers</h3>\n      <Persons contacts={filteredPersons} deleteContact={deleteContact} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}